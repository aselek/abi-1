acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
#PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
#PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
#PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
#PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
#PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
#PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
#PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
#PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
#PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
#PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
#PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]#+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
#PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
#PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
#PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
#PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
#PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
#PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
knnParams=mining(Choice~.,dC,model="boosting",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,dC,model="boosting",search=knnParams$mpar) 
PRFu1=predict(RF,tC)
PRF1=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF1[i] <- ifelse(PRFu1[i,1] < PRFu1[i,2],
PRFu1[i,2]-PRFu1[i,1],
-(PRFu1[i,1]-PRFu1[i,2]))
}
RF <- gbm(Choice ~ ., data=d, dist="bernoulli", n.tree = 400, 
shrinkage = 1, train.fraction = 1)
PRFu2=predict(RF, t, n.trees = 255)
PRF2=PRFu2/7
#PRF2=c(rep(0,length(t[[1]])))
#for(i in 1:length(t[[1]])) {
    #PRF2[i]=ifelse(PRFu2[i]<-8,-8,PRFu2[i])
    #PRF2[i]=ifelse(PRFu2[i]>8,8,PRFu2[i])
#    PRF2[i]=PRFu2[i]/7
#}
knnParams=mining(Choice~.,d,model="mars",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,d,model="mars",search=knnParams$mpar) 
PRFu3=predict(RF,t)
PRF3=PRFu3*2-1
knnParams=mining(Choice~.,dC,model="mlpe",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,dC,model="mlpe",search=knnParams$mpar) 
PRFu4=predict(RF,tC)
PRF4=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF4[i] <- ifelse(PRFu4[i,1] < PRFu4[i,2],
PRFu4[i,2]-PRFu4[i,1],
-(PRFu4[i,1]-PRFu4[i,2]))
}
knnParams=mining(Choice~.,d,model="cubist",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,d,model="cubist",search=knnParams$mpar) 
PRFu5=predict(RF,t)
PRF5=PRFu5*2-1
knnParams=mining(Choice~.,dC,model="ctree",Runs=5,method=c("kfold",3),
search="heuristic5")
RF=fit(Choice~.,dC,model="ctree",search=knnParams$mpar) 
PRFu6=predict(RF,tC)
PRF6=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF6[i] <- ifelse(PRFu6[i,1] < PRFu6[i,2],
PRFu6[i,2]-PRFu6[i,1],
-(PRFu6[i,1]-PRFu6[i,2]))
}
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
results[i]=PRF1[i]+PRF2[i]#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]#+PRF2[i]+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]+PRF3[i]#+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]+PRF4[i]#+PRF5[i]+PRF6[i]
#+PRF3[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]#+PRF5[i]+PRF6[i]
#+PRF3[i]+PRF4[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]+PRF5[i]#+PRF6[i]
#+PRF3[i]+PRF4[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]+PRF6[i]
#+PRF3[i]+PRF4[i]+PRF5[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]
#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF2[i]
#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]PRF1[i]+
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]
#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
pred = prediction(results, t$Choice)
acc.tmp = performance(pred,"auc");
acc = as.numeric(acc.tmp@y.values);
print(acc)
set.seed(1234)
# Read values
setwd('C:\\Users\\BlueMoon\\Documents\\GitHub\\abi')
d=read.csv('train.csv', TRUE, ',')
t=read.csv('test.csv', TRUE, ',')
length(dC[[1]])
summary(dC)
d = createFollowersFollowingRatios(d)
t = createFollowersFollowingRatios(t)
# mirror the data
d = mirrorTheData(d)
knnParams=mining(Choice~.,dC,model="boosting",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,dC,model="boosting",search=knnParams$mpar) 
PRFu1=predict(RF,tC)
PRF1=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF1[i] <- ifelse(PRFu1[i,1] < PRFu1[i,2],
PRFu1[i,2]-PRFu1[i,1],
-(PRFu1[i,1]-PRFu1[i,2]))
}
RF <- gbm(Choice ~ ., data=d, dist="bernoulli", n.tree = 400, 
shrinkage = 1, train.fraction = 1)
PRFu2=predict(RF, t, n.trees = 255)
PRF2=PRFu2/7
#PRF2=c(rep(0,length(t[[1]])))
#for(i in 1:length(t[[1]])) {
    #PRF2[i]=ifelse(PRFu2[i]<-8,-8,PRFu2[i])
    #PRF2[i]=ifelse(PRFu2[i]>8,8,PRFu2[i])
#    PRF2[i]=PRFu2[i]/7
#}
knnParams=mining(Choice~.,d,model="mars",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,d,model="mars",search=knnParams$mpar) 
PRFu3=predict(RF,t)
PRF3=PRFu3*2-1
knnParams=mining(Choice~.,dC,model="mlpe",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,dC,model="mlpe",search=knnParams$mpar) 
PRFu4=predict(RF,tC)
PRF4=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF4[i] <- ifelse(PRFu4[i,1] < PRFu4[i,2],
PRFu4[i,2]-PRFu4[i,1],
-(PRFu4[i,1]-PRFu4[i,2]))
}
knnParams=mining(Choice~.,d,model="cubist",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,d,model="cubist",search=knnParams$mpar) 
PRFu5=predict(RF,t)
PRF5=PRFu5*2-1
knnParams=mining(Choice~.,dC,model="ctree",Runs=5,method=c("kfold",3),
search="heuristic5")
RF=fit(Choice~.,dC,model="ctree",search=knnParams$mpar) 
PRFu6=predict(RF,tC)
PRF6=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF6[i] <- ifelse(PRFu6[i,1] < PRFu6[i,2],
PRFu6[i,2]-PRFu6[i,1],
-(PRFu6[i,1]-PRFu6[i,2]))
}
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
}
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]
#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
set.seed(1234)
# Read values
setwd('C:\\Users\\BlueMoon\\Documents\\GitHub\\abi')
d=read.csv('train.csv', TRUE, ',')
t=read.csv('test.csv', TRUE, ',')
real
d = createFollowersFollowingRatios(d)
t = createFollowersFollowingRatios(t)
# mirror the data
d = mirrorTheData(d)
tC = t
dC = d
dC$Choice <- as.factor(dC$Choice)
tC$Choice <- as.factor(c(rep(1, length(t[[1]])/2),rep(0,length(t[[1]])/2)))
tC$Choice <- as.factor(tC$Choice)
t$Choice <- c(rep(1, length(t[[1]])/2),rep(0,length(t[[1]])/2))
#perf=classify("boosting", dC, dC)
knnParams=mining(Choice~.,dC,model="boosting",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,dC,model="boosting",search=knnParams$mpar) 
PRFu1=predict(RF,tC)
PRF1=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF1[i] <- ifelse(PRFu1[i,1] < PRFu1[i,2],
PRFu1[i,2]-PRFu1[i,1],
-(PRFu1[i,1]-PRFu1[i,2]))
}
RF <- gbm(Choice ~ ., data=d, dist="bernoulli", n.tree = 400, 
shrinkage = 1, train.fraction = 1)
PRFu2=predict(RF, t, n.trees = 255)
PRF2=PRFu2/7
#PRF2=c(rep(0,length(t[[1]])))
#for(i in 1:length(t[[1]])) {
    #PRF2[i]=ifelse(PRFu2[i]<-8,-8,PRFu2[i])
    #PRF2[i]=ifelse(PRFu2[i]>8,8,PRFu2[i])
#    PRF2[i]=PRFu2[i]/7
#}
knnParams=mining(Choice~.,d,model="mars",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,d,model="mars",search=knnParams$mpar) 
PRFu3=predict(RF,t)
PRF3=PRFu3*2-1
knnParams=mining(Choice~.,dC,model="mlpe",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,dC,model="mlpe",search=knnParams$mpar) 
PRFu4=predict(RF,tC)
PRF4=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF4[i] <- ifelse(PRFu4[i,1] < PRFu4[i,2],
PRFu4[i,2]-PRFu4[i,1],
-(PRFu4[i,1]-PRFu4[i,2]))
}
knnParams=mining(Choice~.,d,model="cubist",Runs=5,method=c("kfold",3),
search="heuristic5",f="s")
RF=fit(Choice~.,d,model="cubist",search=knnParams$mpar) 
PRFu5=predict(RF,t)
PRF5=PRFu5*2-1
knnParams=mining(Choice~.,dC,model="ctree",Runs=5,method=c("kfold",3),
search="heuristic5")
RF=fit(Choice~.,dC,model="ctree",search=knnParams$mpar) 
PRFu6=predict(RF,tC)
PRF6=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])) {
    PRF6[i] <- ifelse(PRFu6[i,1] < PRFu6[i,2],
PRFu6[i,2]-PRFu6[i,1],
-(PRFu6[i,1]-PRFu6[i,2]))
}
results=c(rep(0,length(t[[1]])))
for(i in 1:length(t[[1]])){
PRF1[i] <- ifelse(PRF1[i] > 0,PRF1[i]^2,-(PRF1[i]^2))
PRF2[i] <- ifelse(PRF2[i] > 0,PRF2[i]^2,-(PRF2[i]^2))
PRF3[i] <- ifelse(PRF3[i] > 0,PRF3[i]^2,-(PRF3[i]^2))
PRF4[i] <- ifelse(PRF4[i] > 0,PRF4[i]^2,-(PRF4[i]^2))
PRF5[i] <- ifelse(PRF5[i] > 0,PRF5[i]^2,-(PRF5[i]^2))
PRF6[i] <- ifelse(PRF6[i] > 0,PRF6[i]^2,-(PRF6[i]^2))
}
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]
#+PRF3[i]+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,-1)
}
results
summary(results)
i
i=1
i
P=data.frame(ID=c(1:length(t[[1]])),Choice=PRF)
write.csv(P,"results.csv", row.names=FALSE)
P=data.frame(ID=c(1:length(t[[1]])),Choice=results)
write.csv(P,"results.csv", row.names=FALSE)
for(i in 1:length(t[[1]])){
results[i]=PRF1[i]+PRF2[i]+PRF3[i]
#+PRF4[i]+PRF5[i]+PRF6[i]
}
for(i in 1:length(t[[1]])){
results[i] <- ifelse(results[i] > 0,1,0)
}
P=data.frame(ID=c(1:length(t[[1]])),Choice=results)
write.csv(P,"results.csv", row.names=FALSE)
q()
